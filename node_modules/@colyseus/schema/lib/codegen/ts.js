"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var typeMaps = {
    "string": "string",
    "number": "number",
    "boolean": "boolean",
    "int8": "number",
    "uint8": "number",
    "int16": "number",
    "uint16": "number",
    "int32": "number",
    "uint32": "number",
    "int64": "number",
    "uint64": "number",
    "float32": "number",
    "float64": "number",
};
var distinct = function (value, index, self) { return self.indexOf(value) === index; };
function generate(classes, args) {
    return classes.map(function (klass) { return ({
        name: klass.name + ".ts",
        content: generateClass(klass, args.namespace, classes)
    }); });
}
exports.generate = generate;
function generateClass(klass, namespace, allClasses) {
    var allRefs = [];
    klass.properties.forEach(function (property) {
        var type = property.type;
        // keep all refs list
        if ((type === "ref" || type === "array" || type === "map")) {
            allRefs.push(property);
        }
    });
    return types_1.getCommentHeader() + "\n\nimport { Schema, type, ArraySchema, MapSchema, DataChange } from \"@colyseus/schema\";\n" + allRefs.
        filter(function (ref) { return ref.childType && typeMaps[ref.childType] === undefined; }).
        map(function (ref) { return ref.childType; }).
        concat(types_1.getInheritanceTree(klass, allClasses, false).map(function (klass) { return klass.name; })).
        filter(distinct).
        map(function (childType) { return "import { " + childType + " } from \"./" + childType + "\""; }).
        join("\n") + "\n\nexport class " + klass.name + " extends " + klass.extends + " {\n" + klass.properties.map(function (prop) { return "    " + generateProperty(prop); }).join("\n") + "\n\n    constructor () {\n        super();\n\n        // initialization logic here.\n    }\n\n    onChange (changes: DataChange[]) {\n        // onChange logic here.\n    }\n\n    onAdd () {\n        // onAdd logic here.\n    }\n\n    onRemove () {\n        // onRemove logic here.\n    }\n\n}\n";
}
function generateProperty(prop) {
    var langType;
    var initializer = "";
    var typeArgs;
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (isUpcaseFirst) {
            typeArgs += ", " + prop.childType;
        }
        else {
            typeArgs += ", \"" + prop.childType + "\"";
        }
        if (prop.type === "ref") {
            langType = "" + prop.childType;
            initializer = "new " + prop.childType + "()";
            typeArgs = "" + prop.childType;
        }
        else if (prop.type === "array") {
            langType = (isUpcaseFirst)
                ? "ArraySchema<" + prop.childType + ">"
                : "ArraySchema<" + typeMaps[prop.childType] + ">";
            initializer = "new " + langType + "()";
            typeArgs = "[ " + prop.childType + " ]";
        }
        else if (prop.type === "map") {
            langType = (isUpcaseFirst)
                ? "MapSchema<" + prop.childType + ">"
                : "MapSchema<" + typeMaps[prop.childType] + ">";
            initializer = "new " + langType + "()";
            typeArgs = "{ map: " + prop.childType + " }";
        }
    }
    else {
        langType = typeMaps[prop.type];
        typeArgs = "\"" + prop.type + "\"";
    }
    return "@type(" + typeArgs + ") public " + prop.name + ": " + langType + ((initializer) ? " = " + initializer : "") + ";";
}
